{"version":3,"sources":["pages/Register.js"],"names":["Wrapper","styled","div","Title","h1","layout","labelCol","span","wrapperCol","tailLayout","offset","Component","AuthStore","useStores","history","useHistory","name","onFinish","values","console","log","setUsername","username","setPassword","password","register","then","push","message","success","catch","error","onFinishFailed","errorInfo","Item","label","rules","required","min","max","validator","rule","value","test","Promise","reject","resolve","Password","dependencies","hasFeedback","getFieldValue","type","htmlType"],"mappings":"ieAMA,IAAMA,EAAUC,IAAOC,IAAV,KAOPC,EAAQF,IAAOG,GAAV,KAILC,EAAS,CACXC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,KAGRE,EAAa,CACfD,WAAY,CACRE,OAAQ,EACRH,KAAM,KA0GCI,UAtGG,WAAO,IACdC,EAAaC,cAAbD,UACDE,EAAUC,cAkBhB,OACI,kBAACf,EAAD,KACI,kBAACG,EAAD,qBACA,kBAAC,IAAD,iBACQE,EADR,CAEIW,KAAK,QACLC,SAvBK,SAAAC,GACbC,QAAQC,IAAI,WAAYF,GACxBN,EAAUS,YAAYH,EAAOI,UAC7BV,EAAUW,YAAYL,EAAOM,UAC7BZ,EAAUa,WAAWC,MAAK,WAEtBZ,EAAQa,KAAK,KACbC,IAAQC,QAAQ,qCACjBC,OAAM,SAACC,GACNH,IAAQG,MAAM,6BAASA,OAenBC,eAXW,SAAAC,GACnBd,QAAQC,IAAI,UAAWa,MAYf,kBAAC,IAAKC,KAAN,CACIC,MAAM,qBACNnB,KAAK,WACLoB,MAAO,CACH,CACIC,UAAU,EACVT,QAAS,kCAEb,CACIU,IAAK,EACLC,IAAK,GACLX,QAAS,iDAEb,iBAAO,CACHY,UADG,SACOC,EAAMC,GACZ,MAAI,KAAKC,KAAKD,GACHE,QAAQC,OAAO,4EAEnBD,QAAQE,eAK3B,kBAAC,IAAD,OAGJ,kBAAC,IAAKZ,KAAN,CACIC,MAAM,eACNnB,KAAK,WACLoB,MAAO,CACH,CACIC,UAAU,EACVT,QAAS,8BAIjB,kBAAC,IAAMmB,SAAP,OAGJ,kBAAC,IAAKb,KAAN,CACIC,MAAM,2BACNnB,KAAK,kBACLgC,aAAc,CAAC,YACfC,aAAW,EACXb,MAAO,CACH,CACIC,UAAU,EACVT,QAAS,wCAEb,gBAAEsB,EAAF,EAAEA,cAAF,MAAsB,CAClBV,UADkB,SACRC,EAAMC,GACZ,OAAKA,GAASQ,EAAc,cAAgBR,EAIrCE,QAAQC,OAAO,iEAHXD,QAAQE,eAQ/B,kBAAC,IAAMC,SAAP,OAGJ,kBAAC,IAAKb,KAASzB,EACX,kBAAC,IAAD,CAAQ0C,KAAK,UAAUC,SAAS,UAAhC","file":"static/js/14.6fbd217d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Form, Input, Button, message} from 'antd';\nimport styled from \"styled-components\";\nimport {useStores} from \"../stores\";\nimport {useHistory} from 'react-router-dom';\n\nconst Wrapper = styled.div`\n    max-width: 600px;\n    margin: 10px auto;\n    padding: 10px;\n    box-shadow: 1px 1px 1px rgba(0,0,0,0.2);\n`;\n\nconst Title = styled.h1`\n    text-align: center;\n`;\n\nconst layout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 18,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 6,\n        span: 18,\n    },\n};\n\nconst Component = () => {\n    const {AuthStore} = useStores();\n    const history = useHistory();\n    const onFinish = values => {\n        console.log('Success:', values);\n        AuthStore.setUsername(values.username);\n        AuthStore.setPassword(values.password);\n        AuthStore.register().then(() => {\n            // window.alert(\"Register-注册成功\");\n            history.push('/');\n            message.success('注册成功！')\n        }).catch((error) => {\n            message.error(\"注册失败! \"+error);\n        });\n    };\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    return (\n        <Wrapper>\n            <Title>注册</Title>\n            <Form\n                {...layout}\n                name=\"basic\"\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            >\n                <Form.Item\n                    label=\"用户名\"\n                    name=\"username\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '输入用户名',\n                        },\n                        {\n                            min: 4,\n                            max: 10,\n                            message: '长度为4～10个字符'\n                        },\n                        () => ({\n                            validator(rule, value) {\n                                if (/\\W/.test(value)) {\n                                    return Promise.reject('只能包含数字字母和下划线');\n                                }\n                                return Promise.resolve();\n                            }\n                        })\n                    ]}\n                >\n                    <Input/>\n                </Form.Item>\n\n                <Form.Item\n                    label=\"密码\"\n                    name=\"password\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '输入密码',\n                        },\n                    ]}\n                >\n                    <Input.Password/>\n                </Form.Item>\n\n                <Form.Item\n                    label=\"确认密码\"\n                    name=\"confirmPassword\"\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                        {\n                            required: true,\n                            message: '再次确认密码',\n                        },\n                        ({getFieldValue}) => ({\n                            validator(rule, value) {\n                                if (!value || getFieldValue('password') === value) {\n                                    return Promise.resolve();\n                                }\n\n                                return Promise.reject('两次输入的密码不一致!');\n                            },\n                        }),\n                    ]}\n                >\n                    <Input.Password/>\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        注册\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Wrapper>\n    );\n};\n\nexport default Component;\n\n"],"sourceRoot":""}